[comment encoding = UTF-8 /]
[module pnGen('http://forsyde.ict.kth.se/core/forsyde')]

[template public generateProcessNetwork(pn : ProcessNetwork)]
[file (pn.name.concat('.hpp'), false, 'UTF-8')]
#include "forsyde.hpp"
#include <iostream>
[comment including the module containing the process network for composite processes /]
[for (cp : CompositeProcess | pn.processes->filter(CompositeProcess))]
#include "[cp.component.name/].hpp"
[/for]
[comment Including the functionality of leaf processes if has a function argument/]
[for (lp : LeafProcess | pn.processes->filter(LeafProcess))]
[if (not ((lp.processConstructor.name = 'sender') or (lp.processConstructor.name = 'receiver')))] 
[for ( ca : ConstructorArgument | lp.constructorArguments)]
[if (ca.name = '_func')] 
#include "[ca.value.substring(1,ca.value.lastIndex('_')-1)/].hpp"
[/if]
[/for]
[/if] 
[/for]

SC_MODULE([pn.name/])
{
[comment Instantiating ports /]
[for (port : Port | pn.ports)]
    ForSyDe::[port.moc.toString()/]::[portDir(port)/]<[port.dataType.toString()/]> [port.name/];
[/for]
[comment Instantiating signals /]
[for (sig : Signal | pn.signals)]
    ForSyDe::[sig.moc.toString()/]::signal<[sig.dataType.toString()/]> [sig.name/];
[/for]
    SC_CTOR([pn.name/])
    {
[comment Instantiating leaf processes which are not sender or receiver /]
[for (lp : LeafProcess | pn.processes->filter(LeafProcess))]
[if (not (lp.processConstructor.name = 'sender' or lp.processConstructor.name= 'receiver'))]
	auto [lp.name/] = ForSyDe::[lp.processConstructor.moc.toString()/]::make_[lp.processConstructor.name/](
 "[lp.name/]"
[for (ca : ConstructorArgument | lp.constructorArguments)]
 ,[printConstructorArgument(ca)/]
[/for]
[if (not lp.ports->filter(OutputPort)->isEmpty())]
[for (oport : OutputPort | lp.ports->filter(OutputPort)) ]
 ,[printBinding(oport.getBindings()->first())/]
[/for]
[/if]
[if (not lp.ports->filter(InputPort)->isEmpty())]
[for (iport : InputPort | lp.ports->filter(InputPort)) ]
 ,[printBinding(iport.getBindings()->first())/]
[/for]
[/if]
    );
[for (oport : OutputPort | lp.ports->filter(OutputPort))]
[for (b : OclAny | oport.getBindings()->excluding(oport.getBindings()->first()))]
	[lp.name/]->[oport.name/]([printBinding(b)/]);
[/for]
[/for]
[/if]
[/for]

[comment Instantiating leaf processes which are  sender /]
[for (lp : LeafProcess | pn.processes->filter(LeafProcess))]
[if (lp.processConstructor.name = 'sender')]
	auto [lp.name/] = ForSyDe::[lp.processConstructor.moc.toString()/]::make_[lp.processConstructor.name/](
 "[lp.name/]"
[for (ca : ConstructorArgument | lp.constructorArguments)]
 ,[printConstructorArgument(ca)/]
[/for]
[if (not lp.ports->filter(InputPort)->isEmpty())]
[for (iport : InputPort | lp.ports->filter(InputPort)) ]
 ,[printBinding(iport.getBindings()->first())/]
[/for]
[/if]
    );
[/if]
[/for]
[comment Instantiating leaf processes which are receiver /]
[for (lp : LeafProcess | pn.processes->filter(LeafProcess))]
[if (lp.processConstructor.name = 'receiver')]
	auto [lp.name/] = ForSyDe::[lp.processConstructor.moc.toString()/]::make_[lp.processConstructor.name/](
 "[lp.name/]"
[for (ca : ConstructorArgument | lp.constructorArguments)]
 ,[printConstructorArgument(ca)/]
[/for]
[if (not lp.ports->filter(OutputPort)->isEmpty())]
[for (oport : OutputPort | lp.ports->filter(OutputPort)) ]
 ,[printBinding(oport.getBindings()->first())/]
[/for]
[/if]
    );
[/if]
[/for]
[comment Instantiating composite processes /]
[for (cp : CompositeProcess | pn.processes->filter(CompositeProcess))]
	auto [cp.name/] = new [cp.component.name/]("[cp.name/]");
[for (port : Port | cp.ports)]
[for (b : OclAny | port.getBindings())]
	[cp.name/]->[port.name/]([printBinding(b)/]);
[/for]
[/for]
[/for]
    }
};
[/file]
[/template]

[template public portDir(port : Port) post (trim())]
[if (port.oclIsTypeOf(InputPort))]in_port[/if]
[if (port.oclIsTypeOf(OutputPort))]out_port[/if]
[/template]

[comment Retrieve the ports or the signals bound to a port /]
[query public getBindings(p : Port) : OrderedSet(OclAny) = 
p.eContainer(ProcessNetwork).signals->select(s:Signal|s.targetPort=p or s.sourcePort=p)
->union(p.eContainer(ProcessNetwork).ports->filter(InputPort)->select(tp:InputPort|tp.boundPort=p))
->union(p.eContainer(ProcessNetwork).ports->filter(OutputPort)->select(tp:OutputPort|tp.boundPort=p))
 /]

[template public printBinding(b : OclAny)]
[if (b.oclIsTypeOf(Signal))][b.oclAsType(Signal).name/][else][b.oclAsType(Port).name/][/if]
[/template]

[template public printConstructorArgument(ca : ConstructorArgument)]
[if (ca.type = 'string')]"[/if][ca.value/][if (ca.type = 'string')]"[/if]
[/template]
